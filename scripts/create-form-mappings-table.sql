-- =====================================================
-- SCRIPT DE ATUALIZA√á√ÉO COMPLETA DO BANCO SUPABASE
-- FarmaGenius Project - Otimiza√ß√£o e Garantia de Estrutura
-- =====================================================

-- üìä 1. VERIFICA√á√ÉO E OTIMIZA√á√ÉO DA TABELA REPORTS
-- =====================================================

-- Verificar se existem √≠ndices necess√°rios
CREATE INDEX IF NOT EXISTS idx_reports_user_id ON reports(user_id);
CREATE INDEX IF NOT EXISTS idx_reports_date ON reports(date);
CREATE INDEX IF NOT EXISTS idx_reports_status ON reports(status);
CREATE INDEX IF NOT EXISTS idx_reports_created_at ON reports(created_at DESC);

-- Verificar se as colunas existem e adicionar se necess√°rio
DO $$ 
BEGIN
    -- Adicionar coluna total_quantity se n√£o existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'reports' AND column_name = 'total_quantity') THEN
        ALTER TABLE reports ADD COLUMN total_quantity INTEGER DEFAULT 0;
        RAISE NOTICE 'Coluna total_quantity adicionada √† tabela reports';
    END IF;
    
    -- Adicionar coluna total_value se n√£o existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'reports' AND column_name = 'total_value') THEN
        ALTER TABLE reports ADD COLUMN total_value DECIMAL(10,2) DEFAULT 0.00;
        RAISE NOTICE 'Coluna total_value adicionada √† tabela reports';
    END IF;
    
    -- Adicionar coluna solid_count se n√£o existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'reports' AND column_name = 'solid_count') THEN
        ALTER TABLE reports ADD COLUMN solid_count INTEGER DEFAULT 0;
        RAISE NOTICE 'Coluna solid_count adicionada √† tabela reports';
    END IF;
    
    -- Adicionar coluna top_seller se n√£o existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'reports' AND column_name = 'top_seller') THEN
        ALTER TABLE reports ADD COLUMN top_seller TEXT;
        RAISE NOTICE 'Coluna top_seller adicionada √† tabela reports';
    END IF;
    
    -- Adicionar coluna processed_data se n√£o existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'reports' AND column_name = 'processed_data') THEN
        ALTER TABLE reports ADD COLUMN processed_data JSONB;
        RAISE NOTICE 'Coluna processed_data adicionada √† tabela reports';
    END IF;
    
    -- Adicionar coluna kanban_data se n√£o existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'reports' AND column_name = 'kanban_data') THEN
        ALTER TABLE reports ADD COLUMN kanban_data JSONB;
        RAISE NOTICE 'Coluna kanban_data adicionada √† tabela reports';
    END IF;
    
    -- Adicionar coluna sellers_data se n√£o existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'reports' AND column_name = 'sellers_data') THEN
        ALTER TABLE reports ADD COLUMN sellers_data JSONB;
        RAISE NOTICE 'Coluna sellers_data adicionada √† tabela reports';
    END IF;
    
    RAISE NOTICE 'Verifica√ß√£o da tabela reports conclu√≠da ‚úÖ';
END $$;

-- üìã 2. VERIFICA√á√ÉO E OTIMIZA√á√ÉO DA TABELA REPORT_ITEMS
-- =====================================================

-- Criar √≠ndices para performance
CREATE INDEX IF NOT EXISTS idx_report_items_report_id ON report_items(report_id);
CREATE INDEX IF NOT EXISTS idx_report_items_vendedor ON report_items(vendedor);
CREATE INDEX IF NOT EXISTS idx_report_items_categoria ON report_items(categoria);
CREATE INDEX IF NOT EXISTS idx_report_items_horario ON report_items(horario);
CREATE INDEX IF NOT EXISTS idx_report_items_row_index ON report_items(row_index);

-- Verificar estrutura da tabela report_items
DO $$ 
BEGIN
    -- Verificar se a tabela existe, se n√£o, criar
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'report_items') THEN
        CREATE TABLE report_items (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            report_id UUID NOT NULL REFERENCES reports(id) ON DELETE CASCADE,
            form_norm TEXT,
            linha TEXT,
            horario TEXT,
            vendedor TEXT,
            quantidade INTEGER DEFAULT 0,
            valor DECIMAL(10,2) DEFAULT 0.00,
            categoria TEXT,
            source_file TEXT,
            row_index INTEGER,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        RAISE NOTICE 'Tabela report_items criada ‚úÖ';
    END IF;
    
    -- Adicionar colunas se n√£o existirem
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'report_items' AND column_name = 'source_file') THEN
        ALTER TABLE report_items ADD COLUMN source_file TEXT;
        RAISE NOTICE 'Coluna source_file adicionada √† tabela report_items';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'report_items' AND column_name = 'row_index') THEN
        ALTER TABLE report_items ADD COLUMN row_index INTEGER;
        RAISE NOTICE 'Coluna row_index adicionada √† tabela report_items';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'report_items' AND column_name = 'categoria') THEN
        ALTER TABLE report_items ADD COLUMN categoria TEXT;
        RAISE NOTICE 'Coluna categoria adicionada √† tabela report_items';
    END IF;
    
    RAISE NOTICE 'Verifica√ß√£o da tabela report_items conclu√≠da ‚úÖ';
END $$;

-- üë• 3. VERIFICA√á√ÉO DA TABELA USERS
-- =====================================================

-- Criar √≠ndices para users se necess√°rio
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);

-- Verificar estrutura b√°sica da tabela users
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'users') THEN
        CREATE TABLE users (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            name TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        RAISE NOTICE 'Tabela users criada ‚úÖ';
    ELSE
        RAISE NOTICE 'Tabela users j√° existe ‚úÖ';
    END IF;
END $$;

-- üìù 4. TABELA DE OBSERVA√á√ïES DI√ÅRIAS (OPCIONAL)
-- =====================================================

-- Criar tabela daily_observations se n√£o existir (usada no hist√≥rico)
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'daily_observations') THEN
        CREATE TABLE daily_observations (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            date DATE NOT NULL,
            user_id UUID REFERENCES users(id) ON DELETE CASCADE,
            observation TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        CREATE INDEX idx_daily_observations_date ON daily_observations(date);
        CREATE INDEX idx_daily_observations_user_id ON daily_observations(user_id);
        
        RAISE NOTICE 'Tabela daily_observations criada com √≠ndices ‚úÖ';
    ELSE
        RAISE NOTICE 'Tabela daily_observations j√° existe ‚úÖ';
    END IF;
END $$;

-- üóÇÔ∏è 5. TABELA DE MAPEAMENTO DE F√ìRMULAS (FORM_MAPPINGS)
-- =====================================================

-- Criar tabela form_mappings se n√£o existir
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'form_mappings') THEN
        CREATE TABLE form_mappings (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            user_id VARCHAR NOT NULL,
            original_form VARCHAR NOT NULL,
            mapped_category VARCHAR NOT NULL,
            confidence_score INTEGER DEFAULT 0,
            suggestion_reason TEXT,
            mapping_source VARCHAR DEFAULT 'manual' CHECK (mapping_source IN ('manual', 'suggestion', 'auto')),
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            
            -- Constraint para evitar duplicatas
            UNIQUE(user_id, original_form)
        );
        
        -- Criar √≠ndices para melhor performance
        CREATE INDEX idx_form_mappings_user_id ON form_mappings(user_id);
        CREATE INDEX idx_form_mappings_original_form ON form_mappings(original_form);
        CREATE INDEX idx_form_mappings_user_form ON form_mappings(user_id, original_form);
        
        RAISE NOTICE 'Tabela form_mappings criada com √≠ndices ‚úÖ';
    ELSE
        RAISE NOTICE 'Tabela form_mappings j√° existe ‚úÖ';
    END IF;
END $$;

-- üîß 6. POL√çTICAS DE SEGURAN√áA RLS (ROW LEVEL SECURITY)
-- =====================================================

-- Habilitar RLS nas tabelas principais
ALTER TABLE reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE report_items ENABLE ROW LEVEL SECURITY;

-- Habilitar RLS nas tabelas opcionais se existirem
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'daily_observations') THEN
        ALTER TABLE daily_observations ENABLE ROW LEVEL SECURITY;
        RAISE NOTICE 'RLS habilitado para daily_observations ‚úÖ';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'form_mappings') THEN
        ALTER TABLE form_mappings ENABLE ROW LEVEL SECURITY;
        RAISE NOTICE 'RLS habilitado para form_mappings ‚úÖ';
    END IF;
END $$;

-- Pol√≠tica para reports - acesso geral (conforme c√≥digo atual)
DO $$ 
BEGIN
    -- Remover pol√≠tica existente se houver
    DROP POLICY IF EXISTS "reports_user_policy" ON reports;
    DROP POLICY IF EXISTS "reports_access_policy" ON reports;
    
    -- Criar nova pol√≠tica mais flex√≠vel para permitir acesso geral
    CREATE POLICY "reports_access_policy" ON reports
        FOR ALL 
        USING (true)
        WITH CHECK (true);
        
    RAISE NOTICE 'Pol√≠tica de acesso criada para reports ‚úÖ';
END $$;

-- Pol√≠tica para report_items
DO $$ 
BEGIN
    DROP POLICY IF EXISTS "report_items_user_policy" ON report_items;
    DROP POLICY IF EXISTS "report_items_access_policy" ON report_items;
    
    CREATE POLICY "report_items_access_policy" ON report_items
        FOR ALL 
        USING (true)
        WITH CHECK (true);
        
    RAISE NOTICE 'Pol√≠tica de acesso criada para report_items ‚úÖ';
END $$;

-- Pol√≠tica para daily_observations
DO $$ 
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'daily_observations') THEN
        DROP POLICY IF EXISTS "daily_observations_user_policy" ON daily_observations;
        DROP POLICY IF EXISTS "daily_observations_access_policy" ON daily_observations;
        
        CREATE POLICY "daily_observations_access_policy" ON daily_observations
            FOR ALL 
            USING (true)
            WITH CHECK (true);
            
        RAISE NOTICE 'Pol√≠tica de acesso criada para daily_observations ‚úÖ';
    END IF;
END $$;

-- Pol√≠tica para form_mappings
DO $$ 
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'form_mappings') THEN
        DROP POLICY IF EXISTS "Users can view their own mappings" ON form_mappings;
        DROP POLICY IF EXISTS "Users can insert their own mappings" ON form_mappings;
        DROP POLICY IF EXISTS "Users can update their own mappings" ON form_mappings;
        DROP POLICY IF EXISTS "Users can delete their own mappings" ON form_mappings;
        DROP POLICY IF EXISTS "form_mappings_access_policy" ON form_mappings;
        
        CREATE POLICY "form_mappings_access_policy" ON form_mappings
            FOR ALL 
            USING (true)
            WITH CHECK (true);
            
        RAISE NOTICE 'Pol√≠tica de acesso criada para form_mappings ‚úÖ';
    END IF;
END $$;

-- üìà 7. FUN√á√ÉO PARA ATUALIZAR ESTAT√çSTICAS DOS RELAT√ìRIOS
-- =====================================================

-- Fun√ß√£o para recalcular estat√≠sticas dos relat√≥rios
CREATE OR REPLACE FUNCTION update_report_statistics(report_uuid UUID)
RETURNS void AS $$
BEGIN
    UPDATE reports 
    SET 
        total_quantity = (
            SELECT COALESCE(SUM(quantidade), 0) 
            FROM report_items 
            WHERE report_id = report_uuid
        ),
        total_value = (
            SELECT COALESCE(SUM(valor), 0.00) 
            FROM report_items 
            WHERE report_id = report_uuid
        ),
        solid_count = (
            SELECT COUNT(*) 
            FROM report_items 
            WHERE report_id = report_uuid 
            AND (categoria ILIKE '%s√≥lido%' OR form_norm ILIKE '%comprimido%' OR form_norm ILIKE '%c√°psula%')
        ),
        top_seller = (
            SELECT vendedor 
            FROM report_items 
            WHERE report_id = report_uuid 
            AND vendedor IS NOT NULL
            GROUP BY vendedor 
            ORDER BY SUM(valor) DESC 
            LIMIT 1
        )
    WHERE id = report_uuid;
    
    RAISE NOTICE 'Estat√≠sticas atualizadas para relat√≥rio: %', report_uuid;
END;
$$ LANGUAGE plpgsql;

RAISE NOTICE 'Fun√ß√£o update_report_statistics criada ‚úÖ';

-- üè≠ 8. FUN√á√ÉO PARA CLASSIFICA√á√ÉO AUTOM√ÅTICA DE CATEGORIAS DE PRODU√á√ÉO
-- =====================================================

CREATE OR REPLACE FUNCTION categorize_formula(formula_text TEXT)
RETURNS TEXT AS $$
BEGIN
    IF formula_text IS NULL OR trim(formula_text) = '' THEN
        RETURN 'OUTROS';
    END IF;
    
    -- Converter para mai√∫sculas para compara√ß√£o
    formula_text := upper(trim(formula_text));
    
    -- Classifica√ß√£o por tipo de f√≥rmula
    IF formula_text ~ '.*(SOLU√á√ÉO|LO√á√ÉO|L√çQUIDO|XAROPE).*' THEN
        RETURN 'L√çQUIDOS';
    ELSIF formula_text ~ '.*(HOMEOPATIA|FLORAL|DILUI√á√ÉO).*' THEN
        RETURN 'HOMEOPATIA';
    ELSIF formula_text ~ '.*(COMPRIMIDO|C√ÅPSULA|SACH√ä|P√ì).*' THEN
        RETURN 'S√ìLIDOS';
    ELSIF formula_text ~ '.*(CREME|POMADA|GEL|UNGUE).*' THEN
        RETURN 'SEMI-S√ìLIDOS';
    ELSIF formula_text ~ '.*(INJET√ÅVEL|AMPOLA).*' THEN
        RETURN 'INJET√ÅVEIS';
    ELSE
        RETURN 'OUTROS';
    END IF;
END;
$$ LANGUAGE plpgsql;

RAISE NOTICE 'Fun√ß√£o categorize_formula criada ‚úÖ';

-- üîÑ 9. FUN√á√ïES PARA FORM_MAPPINGS
-- =====================================================

-- Fun√ß√£o para atualizar updated_at automaticamente
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'form_mappings') THEN
        CREATE OR REPLACE FUNCTION update_form_mappings_updated_at()
        RETURNS TRIGGER AS $trigger$
        BEGIN
            NEW.updated_at = NOW();
            RETURN NEW;
        END;
        $trigger$ LANGUAGE plpgsql;
        
        -- Criar trigger para atualizar updated_at
        DROP TRIGGER IF EXISTS trigger_update_form_mappings_updated_at ON form_mappings;
        CREATE TRIGGER trigger_update_form_mappings_updated_at
            BEFORE UPDATE ON form_mappings
            FOR EACH ROW
            EXECUTE FUNCTION update_form_mappings_updated_at();
            
        RAISE NOTICE 'Trigger para form_mappings criado ‚úÖ';
    END IF;
END $$;

-- üßπ 10. LIMPEZA E MANUTEN√á√ÉO
-- =====================================================

-- Remover registros √≥rf√£os (se houver)
DO $$
DECLARE
    orphan_count INTEGER;
BEGIN
    -- Contar registros √≥rf√£os antes da limpeza
    SELECT COUNT(*) INTO orphan_count
    FROM report_items 
    WHERE report_id NOT IN (SELECT id FROM reports);
    
    IF orphan_count > 0 THEN
        DELETE FROM report_items 
        WHERE report_id NOT IN (SELECT id FROM reports);
        RAISE NOTICE 'Removidos % registros √≥rf√£os de report_items', orphan_count;
    ELSE
        RAISE NOTICE 'Nenhum registro √≥rf√£o encontrado ‚úÖ';
    END IF;
END $$;

-- üìä 11. ATUALIZAR CATEGORIAS AUTOMATICAMENTE
-- =====================================================

-- Atualizar categorias em report_items que est√£o vazias
DO $$
DECLARE
    updated_count INTEGER;
BEGIN
    UPDATE report_items 
    SET categoria = categorize_formula(form_norm)
    WHERE categoria IS NULL OR categoria = '' OR categoria = 'OUTROS';
    
    GET DIAGNOSTICS updated_count = ROW_COUNT;
    RAISE NOTICE 'Atualizadas % categorias automaticamente', updated_count;
END $$;

-- üîÑ 12. ATUALIZAR ESTAT√çSTICAS DE TODOS OS RELAT√ìRIOS
-- =====================================================

-- Atualizar estat√≠sticas de todos os relat√≥rios existentes
DO $$
DECLARE
    report_record RECORD;
    total_reports INTEGER := 0;
BEGIN
    FOR report_record IN SELECT id FROM reports LOOP
        PERFORM update_report_statistics(report_record.id);
        total_reports := total_reports + 1;
    END LOOP;
    
    RAISE NOTICE 'Estat√≠sticas atualizadas para % relat√≥rios', total_reports;
END $$;

-- üìã 13. VERIFICA√á√ÉO FINAL E RELAT√ìRIO
-- =====================================================

DO $$
DECLARE
    reports_count INTEGER;
    items_count INTEGER;
    users_count INTEGER;
    mappings_count INTEGER := 0;
    observations_count INTEGER := 0;
BEGIN
    -- Contar registros finais
    SELECT COUNT(*) INTO reports_count FROM reports;
    SELECT COUNT(*) INTO items_count FROM report_items;
    SELECT COUNT(*) INTO users_count FROM users;
    
    -- Contar tabelas opcionais
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'form_mappings') THEN
        SELECT COUNT(*) INTO mappings_count FROM form_mappings;
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'daily_observations') THEN
        SELECT COUNT(*) INTO observations_count FROM daily_observations;
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ ========================================';
    RAISE NOTICE '‚úÖ ATUALIZA√á√ÉO COMPLETA FINALIZADA';
    RAISE NOTICE 'üéØ ========================================';
    RAISE NOTICE 'üìä Reports: %', reports_count;
    RAISE NOTICE 'üìã Report Items: %', items_count;
    RAISE NOTICE 'üë• Users: %', users_count;
    RAISE NOTICE 'üóÇÔ∏è Form Mappings: %', mappings_count;
    RAISE NOTICE 'üìù Daily Observations: %', observations_count;
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ Banco otimizado para:';
    RAISE NOTICE '   ‚Ä¢ Dashboard Executivo com dados reais';
    RAISE NOTICE '   ‚Ä¢ Gest√£o de Produ√ß√£o inteligente';
    RAISE NOTICE '   ‚Ä¢ Hist√≥rico Avan√ßado com filtros';
    RAISE NOTICE '   ‚Ä¢ Classifica√ß√£o autom√°tica de categorias';
    RAISE NOTICE '   ‚Ä¢ Performance melhorada com √≠ndices';
    RAISE NOTICE '   ‚Ä¢ Mapeamento de f√≥rmulas';
    RAISE NOTICE '   ‚Ä¢ Observa√ß√µes di√°rias';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Sistema pronto para uso!';
    RAISE NOTICE 'üéØ ========================================';
END $$;

-- =====================================================
-- FIM DO SCRIPT DE ATUALIZA√á√ÉO COMPLETA
-- FarmaGenius Project - Banco 100% Otimizado
-- =====================================================