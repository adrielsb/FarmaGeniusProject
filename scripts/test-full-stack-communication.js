const { createClient } = require('@supabase/supabase-js')
// Usar fetch nativo do Node.js (18+)
const fetch = globalThis.fetch || require('undici').fetch
require('dotenv').config()

// Configura√ß√µes
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const appUrl = 'http://localhost:3004' // Porta onde a aplica√ß√£o est√° rodando

console.log('üîç Verifica√ß√£o Completa da Stack FarmaGenius')
console.log('=' .repeat(50))

// 1. VERIFICA√á√ÉO DAS VARI√ÅVEIS DE AMBIENTE
console.log('\n1Ô∏è‚É£ VERIFICA√á√ÉO DAS VARI√ÅVEIS DE AMBIENTE')
console.log('-'.repeat(40))
console.log('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl ? '‚úÖ Configurada' : '‚ùå Faltando')
console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', !!supabaseAnonKey ? '‚úÖ Configurada' : '‚ùå Faltando')
console.log('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey ? '‚úÖ Configurada' : '‚ùå Faltando')

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis essenciais do Supabase n√£o encontradas!')
  process.exit(1)
}

// Clientes Supabase
const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey)
const supabaseService = supabaseServiceKey ? createClient(supabaseUrl, supabaseServiceKey) : null

async function testDatabase() {
  console.log('\n2Ô∏è‚É£ TESTE DE COMUNICA√á√ÉO COM BANCO DE DADOS')
  console.log('-'.repeat(40))

  try {
    // Teste b√°sico de conectividade
    console.log('üîó Testando conectividade b√°sica...')
    const { data: ping, error: pingError } = await supabaseAnon
      .from('form_mappings')
      .select('count', { count: 'exact', head: true })

    if (pingError) {
      console.error('‚ùå Erro de conectividade:', pingError.message)
      return false
    }
    console.log('‚úÖ Conectividade OK')

    // Listar tabelas principais
    console.log('\nüìã Verificando tabelas principais...')
    const tables = ['form_mappings', 'reports', 'processed_reports', 'production_data']
    const tableStatus = {}

    for (const table of tables) {
      try {
        const { count, error } = await supabaseAnon
          .from(table)
          .select('*', { count: 'exact', head: true })

        if (error) {
          console.log(`‚ùå ${table}: ${error.message}`)
          tableStatus[table] = false
        } else {
          console.log(`‚úÖ ${table}: ${count || 0} registros`)
          tableStatus[table] = true
        }
      } catch (err) {
        console.log(`‚ùå ${table}: ${err.message}`)
        tableStatus[table] = false
      }
    }

    // Teste de opera√ß√µes CRUD na form_mappings
    console.log('\nüß™ Testando opera√ß√µes CRUD...')
    const testData = {
      user_id: 'test-stack-' + Date.now(),
      original_form: 'TEST COMUNICACAO',
      mapped_category: 'TESTE',
      mapping_source: 'manual'
    }

    // INSERT
    const { data: insertData, error: insertError } = await supabaseAnon
      .from('form_mappings')
      .insert(testData)
      .select()

    if (insertError) {
      console.error('‚ùå INSERT falhou:', insertError.message)
      return false
    }
    console.log('‚úÖ INSERT funcionou')

    // SELECT
    const { data: selectData, error: selectError } = await supabaseAnon
      .from('form_mappings')
      .select('*')
      .eq('user_id', testData.user_id)

    if (selectError || !selectData || selectData.length === 0) {
      console.error('‚ùå SELECT falhou')
      return false
    }
    console.log('‚úÖ SELECT funcionou')

    // UPDATE
    const { error: updateError } = await supabaseAnon
      .from('form_mappings')
      .update({ mapped_category: 'TESTE ATUALIZADO' })
      .eq('user_id', testData.user_id)

    if (updateError) {
      console.error('‚ùå UPDATE falhou:', updateError.message)
      return false
    }
    console.log('‚úÖ UPDATE funcionou')

    // DELETE (limpeza)
    const { error: deleteError } = await supabaseAnon
      .from('form_mappings')
      .delete()
      .eq('user_id', testData.user_id)

    if (deleteError) {
      console.error('‚ùå DELETE falhou:', deleteError.message)
    } else {
      console.log('‚úÖ DELETE funcionou')
    }

    return true

  } catch (error) {
    console.error('‚ùå Erro geral no teste de banco:', error.message)
    return false
  }
}

async function testBackendAPIs() {
  console.log('\n3Ô∏è‚É£ TESTE DE COMUNICA√á√ÉO COM BACKEND (APIs)')
  console.log('-'.repeat(40))

  // Lista de endpoints para testar
  const endpoints = [
    { path: '/api/last-processing', method: 'GET', description: '√öltimo processamento' },
    { path: '/api/history', method: 'GET', description: 'Hist√≥rico de relat√≥rios' },
    { path: '/api/production', method: 'GET', description: 'Dados de produ√ß√£o' },
    { path: '/api/test-connection', method: 'GET', description: 'Teste de conex√£o' }
  ]

  const apiResults = {}

  for (const endpoint of endpoints) {
    try {
      console.log(`üîó Testando ${endpoint.method} ${endpoint.path}...`)
      
      const response = await fetch(`${appUrl}${endpoint.path}`, {
        method: endpoint.method,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      })

      const responseTime = Date.now()
      let responseData

      try {
        responseData = await response.json()
      } catch {
        responseData = await response.text()
      }

      if (response.ok) {
        console.log(`‚úÖ ${endpoint.description}: OK (${response.status})`)
        apiResults[endpoint.path] = { status: 'success', code: response.status }
      } else {
        console.log(`‚ö†Ô∏è ${endpoint.description}: ${response.status} - ${response.statusText}`)
        apiResults[endpoint.path] = { status: 'error', code: response.status, error: response.statusText }
      }

    } catch (error) {
      console.log(`‚ùå ${endpoint.description}: ${error.message}`)
      apiResults[endpoint.path] = { status: 'failed', error: error.message }
    }
  }

  return apiResults
}

async function testFrontendBackendIntegration() {
  console.log('\n4Ô∏è‚É£ TESTE DE INTEGRA√á√ÉO FRONTEND-BACKEND')
  console.log('-'.repeat(40))

  try {
    // Simular chamada do FormMappingsService
    console.log('üîó Simulando chamada do FormMappingsService...')
    
    // Teste que simula exatamente o que o dashboard faz
    const userId = 'integration-test-' + Date.now()
    
    // 1. Inserir dados via backend (simulando processamento)
    const testMapping = {
      user_id: userId,
      original_form: 'INTEGRATION TEST',
      mapped_category: 'TEST CATEGORY',
      mapping_source: 'manual'
    }

    const { data: insertData, error: insertError } = await supabaseAnon
      .from('form_mappings')
      .insert(testMapping)
      .select()

    if (insertError) {
      console.error('‚ùå Falha na inser√ß√£o de teste:', insertError.message)
      return false
    }

    console.log('‚úÖ Dados inseridos via backend')

    // 2. Buscar dados via frontend (simulando getUserMappings)
    const { data: mappingsData, error: mappingsError } = await supabaseAnon
      .from('form_mappings')
      .select('original_form, mapped_category')
      .eq('user_id', userId)

    if (mappingsError) {
      console.error('‚ùå Falha na busca de mapeamentos:', mappingsError.message)
      return false
    }

    console.log('‚úÖ Dados recuperados via frontend')

    // 3. Verificar integridade dos dados
    const mappings = {}
    mappingsData.forEach(row => {
      if (row && row.original_form && row.mapped_category) {
        mappings[row.original_form] = row.mapped_category
      }
    })

    if (mappings['INTEGRATION TEST'] === 'TEST CATEGORY') {
      console.log('‚úÖ Integridade dos dados confirmada')
    } else {
      console.log('‚ùå Dados corrompidos ou incompletos')
      return false
    }

    // Limpeza
    await supabaseAnon.from('form_mappings').delete().eq('user_id', userId)
    console.log('‚úÖ Limpeza conclu√≠da')

    return true

  } catch (error) {
    console.error('‚ùå Erro no teste de integra√ß√£o:', error.message)
    return false
  }
}

async function runFullStackTest() {
  console.log('\nüöÄ INICIANDO VERIFICA√á√ÉO COMPLETA...\n')

  const results = {
    database: false,
    backend: {},
    integration: false
  }

  // Testes sequenciais
  results.database = await testDatabase()
  results.backend = await testBackendAPIs()
  results.integration = await testFrontendBackendIntegration()

  // Relat√≥rio final
  console.log('\n5Ô∏è‚É£ RELAT√ìRIO FINAL')
  console.log('='.repeat(50))

  console.log(`üìä Comunica√ß√£o com Banco: ${results.database ? '‚úÖ OK' : '‚ùå FALHOU'}`)
  
  const apiSuccesses = Object.values(results.backend).filter(r => r.status === 'success').length
  const apiTotal = Object.keys(results.backend).length
  console.log(`üåê APIs do Backend: ${apiSuccesses}/${apiTotal} funcionando`)

  console.log(`üîÑ Integra√ß√£o Frontend-Backend: ${results.integration ? '‚úÖ OK' : '‚ùå FALHOU'}`)

  if (results.database && results.integration && apiSuccesses > 0) {
    console.log('\nüéâ STACK FUNCIONANDO CORRETAMENTE!')
    console.log('‚úÖ Todos os componentes essenciais est√£o operacionais')
  } else {
    console.log('\n‚ö†Ô∏è PROBLEMAS DETECTADOS NA STACK')
    console.log('‚ùå Alguns componentes precisam de aten√ß√£o')
  }
}

// Executar verifica√ß√£o
runFullStackTest().catch(error => {
  console.error('‚ùå Erro cr√≠tico na verifica√ß√£o:', error)
  process.exit(1)
})