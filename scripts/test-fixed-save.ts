import 'dotenv/config'

async function testFixedSaveAPI() {
  console.log('üîç Testando API de salvamento corrigida...\n')

  const baseURL = 'http://localhost:3000'

  // Teste 1: Dados v√°lidos
  console.log('‚úÖ Teste 1: Testando dados v√°lidos...')
  
  const validData = {
    title: 'Relat√≥rio Teste Corrigido',
    date: '28/08',
    items: [
      {
        formaNorm: 'DIPIRONA 500MG',
        linha: 'ANALG√âSICOS',
        horario: '08:00',
        vendedor: 'Jo√£o Silva',
        quantidade: 10,
        valor: 150.00,
        categoria: 'MEDICAMENTOS',
        observacoes: 'Teste',
        sourceFile: 'controle',
        rowIndex: 0,
        isMapped: true
      }
    ],
    kpis: {
      totalQuantity: 10,
      totalValue: 150.00,
      solidCount: 1,
      topSeller: 'Jo√£o Silva'
    },
    sellersData: [
      { vendedor: 'Jo√£o Silva', quantidade: 10, valor: 150.00 }
    ],
    kanbanData: {
      todo: [],
      inProgress: [],
      done: ['DIPIRONA 500MG']
    }
  }

  try {
    const response = await fetch(`${baseURL}/api/save-report`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(validData)
    })

    const result = await response.json()
    console.log(`   Status: ${response.status}`)
    console.log(`   Resposta: ${JSON.stringify(result, null, 2)}`)

    if (response.status === 401) {
      console.log('   üí° Status 401 esperado - sem autentica√ß√£o')
    }
  } catch (error) {
    console.log(`   ‚ùå Erro na requisi√ß√£o: ${error}`)
  }

  // Teste 2: Dados inv√°lidos - t√≠tulo vazio
  console.log('\n‚ùå Teste 2: Testando t√≠tulo vazio...')
  
  const invalidTitleData = {
    ...validData,
    title: ''
  }

  try {
    const response = await fetch(`${baseURL}/api/save-report`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(invalidTitleData)
    })

    const result = await response.json()
    console.log(`   Status: ${response.status}`)
    console.log(`   Erro esperado: ${result.error}`)
  } catch (error) {
    console.log(`   ‚ùå Erro na requisi√ß√£o: ${error}`)
  }

  // Teste 3: Dados inv√°lidos - items n√£o √© array
  console.log('\n‚ùå Teste 3: Testando items inv√°lido...')
  
  const invalidItemsData = {
    ...validData,
    items: null
  }

  try {
    const response = await fetch(`${baseURL}/api/save-report`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(invalidItemsData)
    })

    const result = await response.json()
    console.log(`   Status: ${response.status}`)
    console.log(`   Erro esperado: ${result.error}`)
  } catch (error) {
    console.log(`   ‚ùå Erro na requisi√ß√£o: ${error}`)
  }

  // Teste 4: Teste de tipos - KPIs inv√°lidos
  console.log('\nüß™ Teste 4: Testando valida√ß√£o de tipos...')
  
  const invalidTypesData = {
    ...validData,
    kpis: {
      totalQuantity: 'string_inv√°lida',
      totalValue: null,
      solidCount: undefined,
      topSeller: 123
    }
  }

  try {
    const response = await fetch(`${baseURL}/api/save-report`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(invalidTypesData)
    })

    const result = await response.json()
    console.log(`   Status: ${response.status}`)
    console.log(`   Resposta: ${JSON.stringify(result, null, 2)}`)
  } catch (error) {
    console.log(`   ‚ùå Erro na requisi√ß√£o: ${error}`)
  }

  console.log('\n‚ú® Testes de API conclu√≠dos!')
  console.log('üìã As melhorias implementadas incluem:')
  console.log('   ‚úÖ Valida√ß√£o robusta de dados de entrada')
  console.log('   ‚úÖ Sanitiza√ß√£o de strings (trim)')
  console.log('   ‚úÖ Convers√£o segura de tipos num√©ricos')
  console.log('   ‚úÖ Filtragem de itens inv√°lidos')
  console.log('   ‚úÖ Logging detalhado de erros')
  console.log('   ‚úÖ Classifica√ß√£o inteligente de erros')
  console.log('   ‚úÖ Tratamento de casos edge')
}

testFixedSaveAPI()